# -*-sh-*-

echo "Configuring iptables"
sed -i "/^-A INPUT -m state --state NEW -s {{ env['MGMT_CIDR']|replace('/','\/') }} -j ACCEPT/ d" /etc/sysconfig/iptables
# Insert it before the other line
sed -i "/^-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT/ i \
-A INPUT -m state --state NEW -s {{ env['MGMT_CIDR']|replace('/','\/') }} -j ACCEPT" /etc/sysconfig/iptables
systemctl restart iptables


##############################################################
# Adding ntp1.it.uu.se. No DNS => ip only
sed -i "/server 130.238.15.1 iburst/ d" /etc/chrony.conf
echo "server 130.238.15.1 iburst" >> /etc/chrony.conf

systemctl enable chronyd.service
systemctl restart chronyd.service

##############################################################
# Mount the nfs share as /meles

mkdir -p {{ env['CAW_DATA'] }} {{ env['KE_PROJECTS'] }}

if mount | grep -q {{ env['CAW_DATA'] }} ;then umount {{ env['CAW_DATA'] }}; fi
if mount | grep -q {{ env['KE_PROJECTS'] }} ;then umount {{ env['KE_PROJECTS'] }}; fi
sleep 5

mount -t nfs storage:/mnt/data {{ env['CAW_DATA'] }} || exit 1
mount -t nfs storage:/mnt/projects {{ env['KE_PROJECTS'] }} || exit 1
sed -i -e '/storage:/ d' /etc/fstab
echo "storage:{{ env['NFS_ROOT'] }}/data {{ env['CAW_DATA'] }}  nfs   auto,noatime,nolock,bg,nfsvers=4,intr,tcp,actimeo=1800 0 0" >> /etc/fstab
echo "storage:{{ env['NFS_ROOT'] }}/projects {{ env['KE_PROJECTS'] }}  nfs   auto,noatime,nolock,bg,nfsvers=4,intr,tcp,actimeo=1800 0 0" >> /etc/fstab


##############################################################
# Munge and Slurm
# See: https://wiki.fysik.dtu.dk/niflheim/SLURM
for package in -plugins '' -devel -munge -perlapi -sjobexit -sjstat -torque -pam_slurm # -openlava -seff -slurmdbd -slurmdb-direct -sql 
do
    if ! rpm -q slurm${package} >/dev/null; then
	rpm -ivh /home/centos/{{ env['VAULT'] }}/slurm/slurm${package}-16.05.4-1.el7.centos.x86_64.rpm
    fi
done

# Nuke the logs
mkdir -p /var/log/{munge,slurm}
for log in munge/munged.log slurm/slurmctld.log  slurm/slurm_job{acct,comp}.log; do :> /var/log/$log; done
:> /var/log/munge/munged.log
chown -R munge:munge /var/log/munge
:> /var/log/slurm/slurmd.log
chown -R slurm:slurm /var/log/slurm


systemctl restart munge.service
systemctl restart slurmctld.service
# No need to add to iptables: ports 6817/udp 6817/tcp 6818/tcp 7321/tcp
systemctl enable munge.service
systemctl enable slurmctld.service

##############################################################
export http_proxy="{{ env['UU_PROXY'] }}"
git config --global http.proxy ${http_proxy}
git config --global https.proxy ${http_proxy/http/https}

declare -A PARTITIONS
PARTITIONS=(\
    ['knox']='knox1 knox2 knox3' \
    ['knox2-epouta1']='knox1 knox2 epouta1' \
    ['knox1-epouta2']='knox3 epouta2 epouta3' \
    ['epouta']='epouta1 epouta2 epouta3' \
    ['epouta1-knox2']='epouta1 knox1 knox2' \
    ['epouta2-knox1']='epouta2 epouta3 knox3' \
)
declare -a _NODES

rm -f ~/.nextflow.log
#rm -rf ~/.nextflow # Don't clean this one, that's where the dependencies are

###################################################
# Git project CAW
# See: https://github.com/SciLifeLab/CAW/

# pre-processing. Nasty part that requires a lot of CPU and temporary disk space
# once we have the pre-processed reads, we run the remainder (variant call, finding mutations)
if [ ! -d {{ env['KE_PROJECTS'] }}/CAW ]; then
    git clone https://github.com/SciLifeLab/CAW.git {{ env['KE_PROJECTS'] }}/CAW
fi
chmod 757 {{ env['KE_PROJECTS'] }}/CAW

# rm -f {{ env['KE_PROJECTS'] }}/CAW/.nextflow.history {{ env['KE_PROJECTS'] }}/CAW/.nextflow.log*
# rm -rf {{ env['KE_PROJECTS'] }}/CAW/{work,Preprocessing}

cat > /usr/local/bin/run-CAW.sh <<EOF
set -x -e
for n in compute{1..3} epouta{1..3}; do sudo scontrol update NodeName=\$n Weight=1; done
export NXF_WORK={{ env['KE_PROJECTS'] }}/CAW/work
#export NXF_DEBUG=1
#rm -rf ~/results/CAW
mkdir -p ~/results/CAW/timeline
EOF
chmod +x /usr/local/bin/run-CAW.sh

for partition in ${!PARTITIONS[@]}; do
    _NODES=(${PARTITIONS[$partition]})
    cat >> /usr/local/bin/run-CAW.sh <<EOF
rm -rf {{ env['KE_PROJECTS'] }}/CAW/{work,Preprocessing}
# sync
cd
sudo umount {{ env['CAW_DATA'] }}
sudo mount -t nfs storage:/mnt/data {{ env['CAW_DATA'] }}
sudo umount {{ env['KE_PROJECTS'] }}
sudo mount -t nfs storage:/mnt/projects {{ env['KE_PROJECTS'] }}
for n in ${PARTITIONS[$partition]}; do
ssh \$n sudo umount {{ env['CAW_DATA'] }}
ssh \$n sudo mount -t nfs storage:/mnt/data {{ env['CAW_DATA'] }}
ssh \$n sudo umount {{ env['KE_PROJECTS'] }}
ssh \$n sudo mount -t nfs storage:/mnt/projects {{ env['KE_PROJECTS'] }}
done
sudo scontrol update NodeName=${_NODES[0]} Weight=1
sudo scontrol update NodeName=${_NODES[1]} Weight=2
sudo scontrol update NodeName=${_NODES[2]} Weight=3
cd {{ env['KE_PROJECTS'] }}/CAW
nextflow clean -f
nextflow run /home/centos/{{ env['VAULT'] }}/CAW.nf -c /home/centos/{{ env['VAULT'] }}/CAW.config --partition ${partition} --sample {{ env['KE_PROJECTS'] }}/CAW/data/tsv/sample.tsv -with-timeline ~/results/CAW/timeline/${partition}.html > ~/results/CAW/${partition}.log
sudo scontrol update NodeName=${_NODES[0]} Weight=1
sudo scontrol update NodeName=${_NODES[1]} Weight=1
sudo scontrol update NodeName=${_NODES[2]} Weight=1
EOF
done


###################################################
# WGS-structvar project
# See: https://github.com/NBISweden/wgs-structvar

if [ ! -d {{ env['KE_PROJECTS'] }}/WGS ]; then
    git clone https://github.com/NBISweden/wgs-structvar {{ env['KE_PROJECTS'] }}/WGS
fi
chmod 757 {{ env['KE_PROJECTS'] }}/WGS

#rm -rf ~/.nextflow # Don't clean this one, that's where the dependencies are
# rm -f {{ env['KE_PROJECTS'] }}/WGS/.nextflow.history {{ env['KE_PROJECTS'] }}/WGS/.nextflow.log*
# rm -rf {{ env['KE_PROJECTS'] }}/WGS/work

cat > /usr/local/bin/run-WGS.sh <<EOF
set -x -e
for n in compute{1..3} epouta{1..3}; do sudo scontrol update NodeName=\$n Weight=1; done
export NXF_WORK={{ env['KE_PROJECTS'] }}/WGS/work
#export NXF_DEBUG=1
#rm -rf ~/results/WGS
mkdir -p ~/results/WGS/timeline
EOF
chmod +x /usr/local/bin/run-WGS.sh

# Adjusting the wgs.config
for partition in ${!PARTITIONS[@]}; do
    _NODES=(${PARTITIONS[$partition]})
    cat >> /usr/local/bin/run-WGS.sh <<EOF
rm -rf {{ env['KE_PROJECTS'] }}/WGS/work
#sync
sudo umount {{ env['KE_PROJECTS'] }}
sudo mount -t nfs storage:/mnt/projects {{ env['KE_PROJECTS'] }}
for n in ${PARTITIONS[$partition]}; dox
    ssh \$n sudo umount {{ env['KE_PROJECTS'] }}
    ssh \$n sudo mount -t nfs storage:/mnt/projects {{ env['KE_PROJECTS'] }}
done
sudo scontrol update NodeName=${_NODES[0]} Weight=1
sudo scontrol update NodeName=${_NODES[1]} Weight=2
sudo scontrol update NodeName=${_NODES[2]} Weight=3
nextflow clean -f
nextflow run /home/centos/{{ env['VAULT'] }}/WGS.nf -c /home/centos/{{ env['VAULT'] }}/WGS.config --partition ${partition} --datadir {{ env['KE_PROJECTS'] }}/WGS/data -with-timeline ~/results/WGS/timeline/${partition}.html > ~/results/WGS/${partition}.log
sudo scontrol update NodeName=${_NODES[0]} Weight=1
sudo scontrol update NodeName=${_NODES[1]} Weight=1
sudo scontrol update NodeName=${_NODES[2]} Weight=1
EOF
done


###################################################
# SOB stress test
# See: https://www.pdc.kth.se/~pek/sob/README

# rm -rf {{ env['KE_PROJECTS'] }}/SOB/work
mkdir -p {{ env['KE_PROJECTS'] }}/SOB
chmod 757 {{ env['KE_PROJECTS'] }}/SOB
chmod +x {{ env['VAULT'] }}/run-SOB.sh

# # For all partitions
# for partition in ${!PARTITIONS[@]}; do
#     _NODES=(${PARTITIONS[$partition]})
#     {{ env['VAULT'] }}/run-SOB.sh -n ${_NODES// /,} > ~/results/SOB/${partition}.log
# done
