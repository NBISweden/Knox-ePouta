# -*-sh-*-

#############################################################
yum -y install nc nmap tcpdump chrony iptables-services

systemctl enable iptables

#############################################################
# Setting up the web proxy in the environment
# uu_proxy is set up in the init script
for f in /etc/environment ~/.wgetrc
do
    [ -e $f ] && sed -i "/http_proxy/ d" $f
    [ -e $f ] && sed -i "/https_proxy/ d" $f
    cat >> $f <<EOF 
http_proxy="http://uu_proxy:3128/"
https_proxy="https://uu_proxy:3128/"
EOF
done

KE_BUILD=/home/centos/tools
mkdir -p $KE_BUILD

##############################################################
# For the tools

# cat > /etc/yum.repos.d/fedora.repo <<'EOF'
# [fedora]
# name=fedora
# mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=fedora-22&arch=$basearch
# enabled=1
# gpgcheck=0
# EOF
# yum -y install --enablerepo=fedora gcc gcc-c++

# GCC 4.9.2
# yum -y install libmpc-devel mpfr-devel gmp-devel
# if [ ! -x /usr/local/bin/gcc ]; then
#     rm -rf ${KE_BUILD}/gcc-{{ env['GCC_VERSION'] }}.tar.bz2
#     tar -xjf {{ env['VAULT'] }}/sw/gcc-{{ env['GCC_VERSION'] }}.tar.bz2 -C ${KE_BUILD}
#     pushd ${KE_BUILD}/gcc-{{ env['GCC_VERSION'] }}
#     ./configure --disable-multilib --enable-languages=c,c++ #--prefix=/usr/local
#     make -j 4
#     make install
#     popd
# fi

yum -y install tar make bzip2 perl git zlib zlib-devel java-1.8.0-openjdk libstdc++-static gcc gcc-c++
yum -y install ncurses-devel libcurl-devel gnutls-devel nss-devel openssl-devel perl-Data-Dumper autoconf automake

# Installing texlive....it's looooonng !!
# yum -y install R
# So I install a dummy-texlive package instead. Let's see if that breaks later...
[ ! -e texlive-dummy-2012a-1.el7.noarch.rpm ] &&
    curl --proxy http://uu_proxy:3128 -OL http://mirrors.ctan.org/support/texlive/texlive-dummy/EnterpriseLinux-7/texlive-dummy-2012a-1.el7.noarch.rpm

if ! rpm -q texlive-dummy-2012a > /dev/null ; then 
    yum -y install texlive-dummy-2012a-1.el7.noarch.rpm  # --nogpgcheck
fi

yum -y install R
# It cuts down the dependencies from 300 to 100 packages.


#############################################################
# Munge
yum -y install munge munge-devel munge-libs 

# if getent passwd | grep -q munge; then :; else
#     export MUNGEUSER=981
#     groupadd -g $MUNGEUSER munge
#     useradd  -m -c "MUNGE Uid 'N' Gid Emporium" -d /var/lib/munge -u $MUNGEUSER -g munge  -s /sbin/nologin munge
# fi

chown -R munge: /etc/munge/ /var/log/munge/
chmod 0700 /etc/munge/ /var/log/munge/
rsync -a --no-perms {{ env['VAULT'] }}/munge.key /etc/munge/munge.key
chown munge:munge /etc/munge/munge.key
chmod 700 /etc/munge/munge.key

#############################################################
# Dev libs for Slurm
yum -y install openssl openssl-devel pam-devel numactl numactl-devel hwloc hwloc-devel lua lua-devel readline-devel rrdtool-devel ncurses-devel man2html libibmad libibumad perl-ExtUtils-MakeMaker iperf3

for package in -plugins '' -devel -munge -perlapi -sjobexit -sjstat -torque -pam_slurm # -openlava -seff -slurmdbd -slurmdb-direct -sql 
do
    if ! rpm -q slurm${package} >/dev/null; then
	rpm -ivh {{ env['VAULT'] }}/slurm/slurm${package}-16.05.4-1.el7.centos.x86_64.rpm
    fi
done

if getent passwd | grep -q slurm; then :; else
    export SLURMUSER=982
    groupadd -g $SLURMUSER slurm
    useradd  -m -c "SLURM workload manager" -d /var/lib/slurm -u $SLURMUSER -g slurm  -s /bin/bash slurm
fi

mkdir -p /etc/slurm
chown slurm:slurm /etc/slurm
rsync -a --no-perms {{ env['VAULT'] }}/slurm.conf /etc/slurm/slurm.conf
chown slurm:slurm /etc/slurm/slurm.conf
chmod 644 /etc/slurm/slurm.conf

mkdir -p /var/spool/slurmd /var/log/slurm
chown slurm: /var/spool/slurmd /var/log/slurm
chmod 755 /var/spool/slurmd /var/log/slurm

touch /var/log/slurm/slurmd.log
chown slurm: /var/log/slurm/slurmd.log

##############################################################
# Manta
# See: https://github.com/Illumina/manta
# DL: curl -OJL https://github.com/Illumina/manta/archive/v{{ env['MANTA_VERSION'] }}.zip
for v in {{ env['MANTA_VERSIONS'] }}; do
    if [ ! -x /usr/local/manta-${v}/bin/configManta.py ]; then
	if [ ! -d ${KE_BUILD}/manta-${v}.release_src/build ]; then
	    rm -rf ${KE_BUILD}/manta-${v}.release_src
	    tar -xjf {{ env['VAULT'] }}/sw/manta-${v}.tar.bz2 -C ${KE_BUILD}
	    mkdir -p ${KE_BUILD}/manta-${v}.release_src/build # can't be run from its source directory
	    pushd ${KE_BUILD}/manta-${v}.release_src/build
	    export CC=/bin/cc
	    export CXX=/bin/c++
	    ../configure --jobs=4 --prefix=/usr/local/manta-${v}
	    popd
	fi
	make -j 4 -C ${KE_BUILD}/manta-${v}.release_src/build install
    fi
done

##############################################################
# Strelka
# See: https://sites.google.com/site/strelkasomaticvariantcaller/home/strelka-workflow-installation
# DL from: https://sites.google.com/site/strelkasomaticvariantcaller/home/download/strelka_workflow-{{ env['STRELKA_VERSION'] }}.tar.gz?attredirects=0&d=1
for v in {{ env['STRELKA_VERSIONS'] }}; do
    if [ ! -x /usr/local/strelka-${v}/bin/configureStrelkaWorkflow.pl ]; then
	rm -rf ${KE_BUILD}/strelka_workflow-${v}
	tar -xzf {{ env['VAULT'] }}/sw/strelka_workflow-${v}.tar.gz -C ${KE_BUILD}
	pushd ${KE_BUILD}/strelka_workflow-${v}
	./configure --prefix=/usr/local/strelka-${v}
	popd
	make -j 4 -C ${KE_BUILD}/strelka_workflow-${v}
	# Run the demo. Require perl-Data-Dumper
	rm -rf ./strelkaDemoAnalysis
	/usr/local/strelka-${v}/bin/demo/run_demo.bash
    fi
done

##############################################################
# Samtools
# DL: curl -OJL https://github.com/samtools/samtools/releases/download/{{ env['SAMTOOLS_VERSION'] }}/samtools-{{ env['SAMTOOLS_VERSION'] }}.tar.bz2
#               https://github.com/samtools/samtools/archive/{{ env['SAMTOOLS_VERSION'] }}.tar.gz
for v in {{ env['SAMTOOLS_VERSIONS'] }}; do
    if [ ! -x /usr/local/samtools-${v}/bin/samtools ]; then
	rm -rf ${KE_BUILD}/samtools-${v}
	tar -xzf {{ env['VAULT'] }}/sw/samtools-${v}.tar.gz -C ${KE_BUILD}
	pushd ${KE_BUILD}/samtools-${v}
	./configure --enable-plugins --enable-libcurl --prefix=/usr/local/samtools-${v}
	make all all-htslib
	make install install-htslib
	popd
    fi
done

# Ugly hack: Kinda hard-coding
for v in {{ env['SAMTOOLS_VERSIONS_EXTRA'] }}; do
    if [ ! -x /usr/local/samtools-${v}/bin/samtools ]; then
	rm -rf ${KE_BUILD}/samtools-${v}
	tar -xzf {{ env['VAULT'] }}/sw/samtools-${v}.tar.gz -C ${KE_BUILD}
	pushd ${KE_BUILD}/samtools-${v}
	make
	mkdir -p /usr/local/samtools-${v}/bin/{misc,bcftools}
	for f in *; do [ -f $f ] && [ -x $f ] && cp $f /usr/local/samtools-${v}/bin/$f; done
	for f in misc/*; do [ -f $f ] && [ -x $f ] && cp $f /usr/local/samtools-${v}/bin/$f; done
	for f in bcftools/*; do [ -f $f ] && [ -x $f ] && cp $f /usr/local/samtools-${v}/bin/$f; done
	popd
    fi
done

##############################################################
# BWA
# DL: curl -OJL https://github.com/lh3/bwa/archive/v{{ env['BWA_VERSION'] }}.zip
for v in {{ env['BWA_VERSIONS'] }}; do
    if [ ! -x /usr/local/bwa-${v}/bin/bwa ]; then
	rm -rf ${KE_BUILD}/bwa-${v}
	unzip {{ env['VAULT'] }}/sw/bwa-${v}.zip -d ${KE_BUILD}
	pushd ${KE_BUILD}/bwa-${v}
	make
	mkdir -p /usr/local/bwa-${v}/bin
	mv -f bwa /usr/local/bwa-${v}/bin/.
	chmod +x /usr/local/bwa-${v}/bin/bwa
	popd
    fi
done

# ##############################################################
# # VCFtools
# # curl -OJL https://github.com/vcftools/vcftools/archive/v{{ env['VCFTOOL_VERSION'] }}.tar.gz
# for v in {{ env['VCFTOOLS_VERSIONS'] }}; do
#     if [ ! -x /usr/local/vcftools-${v}/bin/vcftools ]; then
# 	rm -rf ${KE_BUILD}/vcftools-${v}
# 	tar -xzf {{ env['VAULT'] }}/sw/vcftools-${v}.tar.gz -C ${KE_BUILD}
# 	pushd ${KE_BUILD}/vcftools-${v}
# 	./autogen.sh
# 	./configure --prefix=/usr/local/vcftools-${v}
# 	make
# 	make install
# 	popd
#     fi
# done

# ##############################################################
# # VEP
# # curl -OJL https://github.com/Ensembl/ensembl-tools/archive/release/{{ env['VEP_VERSION'] }}.zip
# yum -y install perl-File-Copy-Recursive perl-Archive-Extract perl-Module-Build
# for v in {{ env['VEP_VERSIONS'] }}; do
#     if [ ! -x /usr/local/vep-${v}/bin/vep ]; then
# 	rm -rf ${KE_BUILD}/ensembl-tools-release-${v}
# 	unzip {{ env['VAULT'] }}/sw/ensembl-tools-release-${v}.zip -d ${KE_BUILD}
# 	pushd ${KE_BUILD}/ensembl-tools-release-${v}/scripts/variant_effect_predictor/
# 	#perl INSTALL.pl	-d /usr/local/vep-${v} #--NO_HTSLIB
# 	popd
#     fi
# done

##############################################################
# BED TOOLS
for v in {{ env['BEDTOOLS_VERSIONS'] }}; do
    if [ ! -x /usr/local/bedtools-${v}/bin/bedtools ]; then
	rm -rf ${KE_BUILD}/bedtools-${v}
	tar -xzf {{ env['VAULT'] }}/sw/bedtools-${v}.tar.gz -C ${KE_BUILD}
	mv ${KE_BUILD}/bedtools2 ${KE_BUILD}/bedtools-${v} # renaming
	pushd ${KE_BUILD}/bedtools-${v}
	make
	mkdir -p /usr/local/bedtools-${v}/bin
	for f in bin/*; do [ -f $f ] && [ -x $f ] && cp $f /usr/local/bedtools-${v}/$f; done
	popd
    fi
done

# fermikit = 'fermikit/r178'
# snpeff = "snpEff/4.2"
# vt = "vt/0.5772"
# tabix = "tabix/0.2.6"
# bedtools = "BEDTools/2.25.0"


##############################################################
# SOB
if [ ! -x /usr/local/bin/sob ]; then
    mkdir -p {{ env['KE_PROJECTS'] }}/SOB
    pushd {{ env['KE_PROJECTS'] }}/SOB
    gcc -o /usr/local/bin/sob /home/centos/{{ env['VAULT'] }}/sw/sob/sob.c
    chmod +x /usr/local/bin/sob
    popd
fi


##############################################################
# Adding tools to the PATH, for all users
mkdir -p /mnt
[ -L /mnt/sw ] && unlink /mnt/sw
ln -s /home/centos/{{ env['VAULT'] }}/sw /mnt/sw

cat > /etc/profile.d/mmrc.sh <<'EOF'
# micromosler defs

alias ls='ls -h'
alias la='ls -a'
alias lla='ll -a'

module () 
{
    if [ $1 == 'load' ]; then
	local tool=${2/\//-} #
	if [ -d /usr/local/$tool/bin ]; then
		[[ "$PATH" =~ "$tool" ]] || export PATH="/usr/local/$tool/bin:$PATH"
		return 0
	# else
	# 	return 1
	fi
    fi
    # Otherwise, succeed anyway
    return 0
}
export -f module
EOF

# free pagecache, dentries and inodes
echo 3 > /proc/sys/vm/drop_caches
